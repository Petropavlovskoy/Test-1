{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F\\\\time\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Item from \"./Item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getItems = () => {\n      this.setState({\n        isLoading: true\n      });\n      fetch(\"https://www.reddit.com/r/reactjs.json?limit=100\").then(response => response.json()).then(data => {\n        this.setState({\n          items: data.data.children,\n          isLoading: false\n        });\n      });\n    };\n\n    this.updateAutoRefresh = () => {\n      this.setState(state => ({\n        enableAutoRefresh: !state.enableAutoRefresh\n      }), () => {\n        if (this.state.enableAutoRefresh) {\n          this.autoFresh = setInterval(this.getItems, 3000);\n        } else {\n          clearInterval(this.autoRefresh);\n        }\n      });\n    };\n\n    this.updateMinComments = event => {\n      this.setState({\n        minComments: Number(event.target.value)\n      });\n    };\n\n    this.getItemsByComments = (items, minComents) => items.filter(item => item.data.num_comments >= minComents).sort((a, b) => b.data.num_comments - a.data.num_comments);\n\n    this.state = {\n      items: [],\n      isLoading: false,\n      enableAutoRefresh: false,\n      minComments: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getItems();\n  }\n\n  render() {\n    const {\n      items,\n      isLoading,\n      enableAutoRefresh,\n      minComments\n    } = this.state;\n    const itemsByComments = this.getItemsByComments(items, minComments);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top commented\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current filter: \", minComments]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          stile: {\n            marginBottom: \"15px\"\n          },\n          onClick: this.updateAutoRefresh,\n          children: [enableAutoRefresh ? \"Stop\" : \"Start\", \" auto-refresh\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: minComments,\n        onChange: this.updateMinComments,\n        min: 0,\n        max: 500,\n        style: {\n          width: \"100%\",\n          marginBottom: \"15px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this) : itemsByComments.length > 0 ? itemsByComments.map(item => /*#__PURE__*/_jsxDEV(Item, {\n        data: item.data\n      }, item.data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No results found matching your criteria\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/задание время/time/src/App.js"],"names":["React","Item","App","Component","constructor","getItems","setState","isLoading","fetch","then","response","json","data","items","children","updateAutoRefresh","state","enableAutoRefresh","autoFresh","setInterval","clearInterval","autoRefresh","updateMinComments","event","minComments","Number","target","value","getItemsByComments","minComents","filter","item","num_comments","sort","a","b","componentDidMount","render","itemsByComments","marginBottom","width","length","map","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Item from \"./Item\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      items: [],\n      isLoading: false,\n      enableAutoRefresh: false,\n      minComments: 0,\n    };\n  }\n  componentDidMount() {\n    this.getItems()\n  }\n\n  getItems = () => {\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"https://www.reddit.com/r/reactjs.json?limit=100\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          items: data.data.children,\n          isLoading: false\n        });\n      });\n  };\n\n  updateAutoRefresh = () => {\n    this.setState(\n      state => ({\n        enableAutoRefresh: !state.enableAutoRefresh\n      }),\n      () => {\n        if (this.state.enableAutoRefresh) {\n          this.autoFresh = setInterval(this.getItems, 3000);\n        } else {\n          clearInterval(this.autoRefresh);\n        }\n      }\n    );\n  };\n\n  updateMinComments = (event) => {\n    this.setState({\n      minComments: Number(event.target.value)\n    });\n  };\n\ngetItemsByComments= (items,minComents) => items\n  .filter(item => item.data.num_comments >= minComents)\n    .sort((a, b) => b.data.num_comments - a.data.num_comments);\n    render() {\n    const { items, isLoading, enableAutoRefresh, minComments } = this.state;\n    const itemsByComments = this.getItemsByComments(items, minComments);\n      \n    return (\n      <div>\n        <h1>Top commented</h1>\n        <p>Current filter: {minComments}</p>\n        <div>\n          <button type=\"button\" stile={{ marginBottom: \"15px\" }}\n            onClick={this.updateAutoRefresh}>\n            {enableAutoRefresh ? \"Stop\" : \"Start\"} auto-refresh\n        </button>\n        </div>\n\n        <input\n          type=\"range\"\n          value={minComments}\n          onChange={this.updateMinComments}\n          min={0}\n          max={500}\n          style={{ width: \"100%\", marginBottom: \"15px\" }} />\n        {isLoading ? (<p>...Loading</p>) : \n        itemsByComments.length > 0 ? (\n          itemsByComments.map(item => (\n            <Item key={item.data.id} data={item.data} />)\n          )) : (<p>No results found matching your criteria</p>\n    )}\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}