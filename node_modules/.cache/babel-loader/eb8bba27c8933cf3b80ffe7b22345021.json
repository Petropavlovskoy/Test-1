{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F\\\\time\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Item from \"./Item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getItems = () => {};\n\n    this.updateAutoRefresh = () => {};\n\n    this.state = {\n      items: [],\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const {\n      items,\n      isLoading\n    } = this.state;\n    const itemsSortByComments = items.sort((a, b) => b.data.num_comments - a.data.num_comments);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top commented\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        stile: {\n          marginBottom: \"15px\"\n        },\n        onClick: then.updateAutoRefresh,\n        children: \"Start auto-refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this) : items.map(item => /*#__PURE__*/_jsxDEV(Item, {\n        data: item.data\n      }, item.data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 27\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/задание время/time/src/App.js"],"names":["React","Item","App","Component","constructor","getItems","updateAutoRefresh","state","items","isLoading","componentDidMount","render","itemsSortByComments","sort","a","b","data","num_comments","marginBottom","then","map","item","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEC,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AACjCC,EAAAA,WAAW,GAAE;AACX;;AADW,SAWXC,QAXW,GAWA,MAAK,CAEf,CAbU;;AAAA,SAeXC,iBAfW,GAeQ,MAAM,CAGxB,CAlBU;;AAEX,SAAKC,KAAL,GAAW;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAX;AAID;;AACCC,EAAAA,iBAAiB,GAAG,CAEnB;;AAWHC,EAAAA,MAAM,GAAG;AACP,UAAM;AAACH,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAqB,KAAKF,KAAhC;AACA,UAAMK,mBAAmB,GAAGJ,KAAK,CAACK,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAACC,IAAF,CAAOC,YAAP,GAAoBH,CAAC,CAACE,IAAF,CAAOC,YAA/C,CAA5B;AACA,wBACA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAG;AAACC,UAAAA,YAAY,EAAE;AAAf,SAA9B;AACA,QAAA,OAAO,EAAEC,IAAI,CAACb,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAMGG,SAAS,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,GACRD,KAAK,CAACY,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;AAA2B,QAAA,IAAI,EAAEA,IAAI,CAACL;AAAtC,SAAaK,IAAI,CAACL,IAAL,CAAUM,EAAvB;AAAA;AAAA;AAAA;AAAA,cAAlB,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAYC;;AApC8B;;AAuCjC,eAAepB,GAAf","sourcesContent":["import React from \"react\";\nimport Item from \"./Item\"\n\n class App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      items: [],\n      isLoading: false\n    };\n  }\n    componentDidMount() {\n     \n    }\n\n    getItems = () =>{\n\n    }\n\n    updateAutoRefresh= () => {\n\n\n    }\n\n  render() {\n    const {items, isLoading} = this.state;\n    const itemsSortByComments = items.sort((a,b) => b.data.num_comments-a.data.num_comments);\n    return (\n    <div>\n      <h1>Top commented</h1>\n      <button type=\"button\" stile ={{marginBottom: \"15px\"}}\n      onClick={then.updateAutoRefresh}>\n        Start auto-refresh\n        </button>\n      {isLoading ? (<p>...Loading</p>) : (\n        items.map(item => <Item key = {item.data.id} data={item.data}/>)\n    )}\n    </div>\n    );\n    }\n  }\n\n  export default App;"]},"metadata":{},"sourceType":"module"}